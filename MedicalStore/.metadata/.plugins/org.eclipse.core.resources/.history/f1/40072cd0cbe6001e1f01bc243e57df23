package com.medicalstore.tests;
import com.medicalstore.controller.MedicineController;
import com.medicalstore.entity.MedicineEntity;
import com.medicalstore.service.MedicineService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import java.util.Arrays;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

public class MedicineTests {

    @Mock
    private MedicineService medicineService;

    @InjectMocks
    private MedicineController medicineController;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    void testGetAllMedicines() {
        // Mock data
        MedicineEntity medicine1 = new MedicineEntity(1L, "Medicine 1", "Dosage 1", 10.0, null, null, null, null, null, 100);
        MedicineEntity medicine2 = new MedicineEntity(2L, "Medicine 2", "Dosage 2", 20.0, null, null, null, null, null, 200);
        List<MedicineEntity> medicineList = Arrays.asList(medicine1, medicine2);

        // Stubbing the service method
        when(medicineService.getAllMedicines()).thenReturn(medicineList);

        // Calling the controller method
        ResponseEntity<List<MedicineEntity>> response = medicineController.getAllMedicines();

        // Verifying the response
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertEquals(2, response.getBody().size());
    }

    @Test
    void testGetMedicineById() {
        // Mock data
        MedicineEntity medicine = new MedicineEntity(1L, "Medicine 1", "Dosage 1", 10.0, null, null, null, null, null, 100);

        // Stubbing the service method
        when(medicineService.getMedicineById(1L)).thenReturn(medicine);

        // Calling the controller method
        ResponseEntity<MedicineEntity> response = medicineController.getMedicineById(1L);

        // Verifying the response
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertEquals(medicine, response.getBody());
    }

    @Test
    void testAddMedicine() {
        // Mock data
        MedicineEntity newMedicine = new MedicineEntity(1L, "New Medicine", "New Dosage", 15.0, null, null, null, null, null, 150);

        // Stubbing the service method
        when(medicineService.saveMedicine(any(MedicineEntity.class))).thenReturn(newMedicine);

        // Calling the controller method
        ResponseEntity<MedicineEntity> response = medicineController.addMedicine(newMedicine);

        // Verifying the response
        assertEquals(HttpStatus.CREATED, response.getStatusCode());
        assertEquals(newMedicine, response.getBody());
    }

    // Similarly, you can write tests for other controller methods like updateMedicine, updateMedicineQuantity, etc.
}
